type::post

post:json
+++
{
	"title": "Thinking with Abstractions",
	"slug": "thinking-with-abstractions",
	"metadata": {
		"content_name": "Thinking with Abstractions",
		"directory" : "coalescence",
		"author_name": "jak",
		"published_date": "2022-04-28",
		"version": 1
	}
}
+++

post.notes:markdown
+++
Should I be worrying about lenses in here too? I think abstractions are separate and small and applicable to everything. Useful for describing systems, lenses, physics, etc. Maybe lets separate them.

What is an abstraction? Abstraction is when we group things together into a single larger part. There are so many things in the world that it would be impossible to function without abstractions.

important ideas:
- abstraction is grouping multiple things into a new single thing
- creating an abstraction cause both information loss and gain
- abstractions can be layered

the reason abstractions are important is that they are what the brain is built to do. the human sensory system takes in an insane amount of raw information, and then filters out that raw information into "abstracted" version of itself; instead of raw points of light, pressure, and sound waves, it becomes images, object recognition and placement, physical orientation, the sound of someone's voice. a raw sound wave is just pure data, but through processing and abstracting, our brain picks it apart and groups it into parts like "the hum of the refridgerator" or "the sound of your mother's voice". when we think about a "single" object, that is again an act of abstraction. my phone wrapped in a case on my desk becomes a single object, even though I can take the phone out of the case, and then disassmble the phone into a pile of parts, and then break its glass into dust, and so on. we can navigate up and down through abstractions; instead of breaking down the phone on the desk, we could abstract up and see the desk as a single unit, or the office, or the whole apartment, or the city block, the city itself, etc. We can pick and choose the right "level" of the abstraction depending on the circumstance. we can get in a car and navigate the abstraction of it's control, how the wheel maps to direction, and the pedals map to speed, but at the same time we can operate at a higher level of abstraction as an element within the flow of traffic itself. we can use abstractions to break down large goals into smaller pieces: you want to lose weight, so you have to exercise more and also eat less calories, you make a plan to exercise by running 3 times a week, you are actively running by puttin on your shoes and putting one foot in front of the other.

human language is abstraction. we take all of the physical world, all of our human emotions, needs, and desires, and map it all onto a limited set of words.

so, okay, what's the point here? abstraction is when we take a bunch of "things", and wrap them up into a new single object. taking a bunch atoms and calling them a molecule, taking a bunch of buildings and calling them a neighborhood, taking a bunch of people and calling them a family. this is really helpful for simplifying large bits of information within a context.

abstractions can be good when the context provides any lost information, but abstractions can be bad when removed from their original context.

Examples of abstractions:
 - 
+++

post.content:sam->html
+++
section: Introduction

	Abstractions are one of the most powerful thinking tools that humans are capable of using. Our ability to create and navigate abstractions is what gave us language, society, art, and science. All of us use abstractions every day, and without them we would be collapsed in a heap on the floor, unable to function. And yet... most people have never had an intentional and focused lesson on what abstractions are.
	
	This is that intentional and focused lesson.

	This article is the first in a series about a philosophical framework called {Cooperative Coalescence}(em), which is a new operating system for humans living in a complex world. As I was writing the longer and more essential articles, I found that I was repeatedly re-explaining this concept of "abstraction" in many different places.
	
	The majority of the components of this framework are about learning new "thinking tools", but I realized that this concept of abstraction was perhaps the most fundamental of them all. So before we dive into anything more complicated, it would probably be a lot easier for both of us if we just started with this:
	
	{"What are abstractions, and why are they so important?"}(strong)

section: Objects

	Let's start with some basic {Ontology}(em), which is a branch of philosophy concerned with categorizing "objects". There are two main categories of objects—the {Concrete}(em) and the {Abstract}(em). You can think of these two categories as "real" (concrete) and "imaginary" (abstract). Concrete objects are physical things, like the earth, a baseball bat, or a computer. Abstract objects are conceptual, like "the world", the game of baseball, or a program that runs on a computer. The idea of abstract objects {themselves}(em) is even an abstract object.

	section:(class="new-concept") Abstract Object
		x-field: Ontology
		x-field: Philosophy
		x-definition:
			An abstract object is a conceptual entity that does not physically exist. It is an "idea", existing in the realm of "thought" or "information".

	An interesting quirk of being human is that—when you really think about it—we can't actually directly engage with the physical world. We have senses that receive information from our physical environment, but ultimately our brains create an abstract version of the world inside of our mind.
	
	And so, in order for us to {think}(em) about a physical object, in order for us to interact with it all, we must create an abstract representation of it in our mind. This means that there is an important difference between the actual ground you are standing this on, and the idea of that ground in your mind.

	section:(class="new-concept") Concrete Object
		x-field: Ontology
		x-field: Philosophy
		x-definition:
			A concrete object is a physical entity that is created out of matter. It exists in "the real world", and is distinct and separate from the {idea}(em) of that object. For example: "The word is not the thing", "The map is not the territory", {"This is not a pipe"}(a|href="https://en.wikipedia.org/wiki/The_Treachery_of_Images").

	Another way of thinking about it is this: to bring a concrete object into our mind, we must {wrap it}(em) in an abstract object. {We must abstract it.}(strong) The main takeaway is that, within the mind, every object is abstract.

section: Abstraction
	
	We've already seen our first example of abstraction, which is when we wrap a concrete object in an abstract object in order to "use" that object in our thoughts. {This is the essence of abstraction: creating a new abstract object that is a conceptual container for other objects.}(strong)
	
	However, in addition to putting concrete objects in these containers, we can put abstract objects in there as well. And since we've already determined that every object in our mind is abstract... you can see the power here.

	Let's take a look at some examples.

	section:(class="thought-experiment") Abstractions in Chess
		x-related-concept: Abstraction
		
		To play chess, you need 33 physical objects: a flat checkered surface, 16 black pieces, and 16 white pieces. In our mind, we create abstract concepts that represent those physical pieces: a chess board, pawns, knights, rooks, etc. We can then take those abstractions and place them all inside {another}(em) abstraction that represents "a complete chess set".
		
		We also have abstract objects in our mind that represent the rules of chess, like the objective of the game and how pieces are allowed to move. We create a "pawn" by grouping the rule object for a pawn with the small black wooden piece object. The resulting abstraction is now a new entity within the context of the game, with the ability to move around the chess board and take enemy pieces.
		
		{Remember, this abstraction of a "pawn" lives only in our (and our opponent's) mind—the little piece of wood doesn't actually have restrictions on it's physical movement.}(em)
		
		We build layers of abstraction in our mind about what the pieces are, if they are friendly or enemy, how they are allowed to move, what is our current strategy, and so on. {Even the entire context of the game is an abstraction}(em), and if someone outside the game were to walk up to us and ask us a question while playing, we could mentally move ourselves outside the abstraction of the chess game, answer the question, and return to it.
	
	x-arrow-connector:
	
	section:(class="new-concept") Abstraction
		x-field: Metaphysics
		x-field: Philosophy
		x-definition:
			An abstraction is the result of wrapping a set of objects inside a new abstract object. The new object—the abstraction—becomes a simplified way to refer to a collection of things as one thing.

	Aside from just chess, we use abstractions for {everything}(em), whether we're conscious of it or not. Language is a great example; {words}(em) are abstractions for the objects they refer to (again, "the word is not the thing"). We use abstractions to separate our work from our play, to organize all of our knowledge, and to keep track of all the different guys named "Mike" that we know.

	x-subsection: Layers of Cognition

		The most powerful property of abstractions is that we can layer them—in other words, that we can abstract an abstraction.
		
		Our entire perception of reality is built out of layered abstractions. In order to "see", raw light hitting our retinas is abstracted into images, those images are abstracted into distinct objects, and those objects are abstracted into the concept of a desk, or a bike. We're not actually seeing a "bike"—we're processing a bunch of {light that bounced off the bike}(em) and hit our retinas. But through the power of those layered abstractions, we can interpret that raw light as "a bike".
		
		The ability to layer these abstractions helps us maintain a manageable {cognitive load}(em) in our brain. Without this ability to simplify those millions of dots of light into a single "bike" concept, we would max out our cognitive load and be incapable of functioning.

		section:(class="new-concept") Cognitive Load
			x-field: Cognitive Psychology
			x-definition:
				When the brain is processing information, it only has so much {working memory}(em) (short-term memory) that it can use to hold into information. Using more working memory increases the cognitive load. When we run out of working memory, our cognitive load hits a ceiling, and our ability to process information sharply declines. This is "Information Overload".

	x-subsection: Information and Context

		However, there's an easily missed side effect to creating all of these layers of abstraction. When we reduce "more information" into "less information", we are going to (obviously) end up {losing}(em) some information. Luckily, with well made abstractions, we can preserve that information through a "context".

		For an example, let's get back to all of those "Mikes" we know.
		
		section:(class="thought-experiment") Names in Context
			x-related-concept: Abstraction

			We know "Michael Jordan" from work, and we also know "Michael Bay" who lives in our neighborhood.
			
			Within the context of our workplace, we abstract "Michael Jordan" down to "Mike". We and our coworkers have an implicit understanding of who we're referring to when we just say "Mike". In this case, even though we lose information by abstracting his full name to a nickname, {the context preserves the lost information.}(strong)
			
			However, there's also risk with that abstraction. If we take that abstraction outside of it's context and use "Mike" while talking to our mom, she won't know who we're talking about unless we've explicitly established a context of who "Mike" is in our conversation.
			
			Even worse is if we used the shortened "Mike" (referring to Mr Jordan) in a conversation with our neighbor. In that case there's a direct conflict between contexts, and the neighbor may interpret "Mike" as "Michael Bay" down the street. {This is the danger of removing an abstraction from its context.}(strong)
		
section: Takeaways

	Abstractions are a pretty cool guy, and doesn't afraid of anything.

	section:(class="site-sections") Takeaways

		The final takeaways are:

		1. Abstractions are putting ideas in other ideas
		2. Abstractions can be layered
		3. They reduce our cognitive load
		4. They lose information by storing it in a context

+++