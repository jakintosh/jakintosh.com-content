type::post

post:json
+++
{
	"title": "Thinking with Abstractions",
	"slug": "thinking-with-abstractions",
	"metadata": {
		"content_name": "Thinking with Abstractions",
		"directory" : "coalescence",
		"author_name": "jak",
		"published_date": "XXXX-XX-XX",
		"version": 1,
		"build": false
	}
}
+++

post.content:sam->html
+++
section: Introduction

	Another intro.

section: Layers of Cognition

	The most powerful property of abstractions is that we can layer them—in other words, that we can abstract an abstraction.
	
	Our entire perception of reality is built out of layered abstractions. In order to "see", raw light hitting our retinas is abstracted into images, those images are abstracted into distinct objects, and those objects are abstracted into the concept of a desk, or a bike. We're not actually seeing a "bike"—we're processing a bunch of {light that bounced off the bike}(em) and hit our retinas. But through the power of those layered abstractions, we can interpret that raw light as "a bike".
	
	The ability to layer these abstractions helps us maintain a manageable {cognitive load}(em) in our brain. Without this ability to simplify those millions of dots of light into a single "bike" concept, we would max out our cognitive load and be incapable of functioning.

	section:(class="new-concept") Cognitive Load
		x-field: Cognitive Psychology
		x-definition:
			When the brain is processing information, it only has so much {working memory}(em) (short-term memory) that it can use to hold into information. Using more working memory increases the cognitive load. When we run out of working memory, our cognitive load hits a ceiling, and our ability to process information sharply declines. This is "Cognitive Overload".

	Layering abstractions is helpful in reducing cognitive load, but another important trick of the human brain is that we can {shift between those layers}(em). We can zoom in and out of different abstractions when necessary, and in most cases we do this automatically.
	
	Like in our chess game: we can have a deep abstraction built around the state of the game, our current long term strategy, and the moves we are considering, but we can step out of the abstraction of our game to answer an unrelated question, or maybe to get up and get a glass of water.

	section:(class="thought-experiment") Abstracted Driving
		x-related-concept: Abstraction
		x-related-concept: Abstraction Traversal
		
		Driving a car is a great example of how we semi-consciously shift between abstractions.

		When we first start learning how to drive (or ride a bike), we tend to be mostly focused on the "operation of the controls". We learn where controls are and how the machine responds to our input, and build up an intuition of what behavior is safe.

		After a while, driving (or riding a bike!) becomes automatic. We can shift into a higher level of abstraction, where we don't think about how much to turn the steering wheel or where to move our foot, but we see ourselves as "one with the car", only thinking about "speed up", or "change lanes".
		
		With even more experience and on long drives on open highways, even those "one with the car" behaviors abstract away: we are operating at the level of "the flow of traffic" itself, not actively thinking about what we're doing at all. We can shift our abstraction layer to operating music or navigation controls, or to play a game counting the number of yellow cars you pass.

		However, when the tail lights are lit up in front of us, we can shift back down to "one with the car", again thinking to slow down. In certain circumstances we can even drop down to the "operation of controls" layer, if we suddenly find ourselves skidding on ice unsure of what to do.

	x-arrow-connector:

	section:(class="new-concept") Abstraction Traversal
		x-field: Cognitive Psychology
		x-definition:
			The brain can "zoom in" and "zoom out" of abstractions, allowing us to move to the most suitable level of detail for the task at hand.

section: Information and Context

	However, there's an easily missed side effect to creating all of these layers of abstraction. When we reduce "more information" into "less information", we are going to (obviously) end up {losing}(em) some information. Luckily, with well made abstractions, we can preserve that information through a "context".

	For an example, let's get back to all of those "Mikes" we know.
	
	section:(class="thought-experiment") Names in Context
		x-related-concept: Abstraction

		We know "Michael Jordan" from work, and we also know "Michael Bay" who lives in our neighborhood.
		
		Within the context of our workplace, we abstract "Michael Jordan" down to "Mike". We and our coworkers have an implicit understanding of who we're referring to when we just say "Mike". In this case, even though we lose information by abstracting his full name to a nickname, {the context preserves the lost information.}(strong)
		
		However, there's also risk with that abstraction. If we take that abstraction outside of it's context and use "Mike" while talking to our mom, she won't know who we're talking about unless we've explicitly established a context of who "Mike" is in our conversation.
		
		Even worse is if we used the shortened "Mike" (referring to Mr Jordan) in a conversation with our neighbor. In that case there's a direct conflict between contexts, and the neighbor may interpret "Mike" as "Michael Bay" down the street. {This is the danger of removing an abstraction from its context.}(strong)
		
section: Takeaways

	Abstractions are a pretty cool guy, and doesn't afraid of anything.

	section:(class="site-sections") Takeaways

		The final takeaways are:

		1. Abstractions are putting ideas in other ideas
		2. Abstractions can be layered
		3. They reduce our cognitive load
		4. They lose information by storing it in a context

+++